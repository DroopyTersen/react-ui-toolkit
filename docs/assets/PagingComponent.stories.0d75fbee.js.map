{"version":3,"file":"PagingComponent.stories.0d75fbee.js","sources":["../../src/ui-toolkit/hooks/useUpdateEffect.ts","../../src/ui-toolkit/hooks/usePaging.ts","../../src/ui-toolkit/components/Paging/PagingComponent.tsx"],"sourcesContent":["import { useEffect, useRef } from \"react\";\n\nexport function useUpdateEffect(effectFn, dependencies: any[]) {\n  let hasMountedRef = useRef(false);\n\n  useEffect(() => {\n    if (hasMountedRef.current) {\n      return effectFn();\n    } else {\n      hasMountedRef.current = true;\n    }\n  }, dependencies);\n}\n","import { useEffect, useState } from \"react\";\nimport { useUpdateEffect } from \"./useUpdateEffect\";\n\nfunction validatePageNumber(currentPage: number, totalPages: number): number {\n  if (currentPage) {\n    const qsPage = parseInt(currentPage + \"\");\n    if (!Number.isNaN(qsPage)) {\n      currentPage = qsPage;\n    } else {\n      return 1;\n    }\n  }\n\n  // If current page is too high, set it to the last page\n  // if (totalPages > 0 && currentPage > totalPages) return totalPages;\n\n  // If current page is too high, set it to the first page\n  if (totalPages > 0 && currentPage > totalPages) return 1;\n  else if (currentPage < 1) return 1;\n\n  return currentPage;\n}\n\nexport function usePaging(totalPages: number, { initialPage = 1 } = {}) {\n  const [currentPage, setCurrentPage] = useState(() => validatePageNumber(initialPage, totalPages));\n  useEffect(() => {\n    setCurrentPage(validatePageNumber(initialPage, totalPages));\n  }, [initialPage, totalPages]);\n\n  let goBack = () => {\n    let newPage = currentPage - 1;\n    if (newPage < 1) newPage = totalPages;\n    setCurrentPage(newPage);\n  };\n  let goForward = () => {\n    let newPage = currentPage + 1;\n    if (newPage > totalPages) newPage = 1;\n    setCurrentPage(newPage);\n  };\n  let goTo = (pageNumber: number) => {\n    if (pageNumber > totalPages) pageNumber = totalPages;\n    if (pageNumber < 1) pageNumber = 1;\n    setCurrentPage(pageNumber);\n  };\n\n  return {\n    currentPage,\n    goForward,\n    goBack,\n    goTo,\n    totalPages,\n  } as PagingContext;\n}\n\nexport const usePagedItems = function <T = any>(\n  allItems: T[],\n  itemsPerPage: number,\n  { initialPage = 1 } = {}\n) {\n  let totalPages = Math.ceil(allItems.length / itemsPerPage);\n  let paging = usePaging(totalPages, { initialPage });\n  let startIndex = (paging.currentPage - 1) * itemsPerPage;\n  let endIndex = startIndex + itemsPerPage;\n  let isWrapping = endIndex > allItems.length;\n\n  let items = allItems.slice(startIndex, endIndex);\n  // if (isWrapping) {\n  //   items = [...items, ...allItems.slice(0, endIndex - allItems.length)];\n  // }\n\n  useUpdateEffect(() => {\n    paging.goTo(1);\n  }, [allItems]);\n\n  return [items, paging] as [T[], PagingContext];\n};\n\nexport interface PagingContext {\n  /** Go backwards one page. If you go below page 1, you will be sent to the last page. */\n  goBack: () => void;\n  /** Go forwards one page. If you exceed the max page, it will go back to the first page. */\n  goForward: () => void;\n  /** Jump to a specific page number */\n  goTo: (page: number) => void;\n  /** The current page in state */\n  currentPage: number;\n  /** The total number of pages */\n  totalPages: number;\n}\n","import React from \"react\";\n\ninterface PagingComponentProps {\n  totalPages: number;\n  currentPage: number;\n  onChange: (page: number) => void;\n  maxPagesToDisplay?: number;\n  className?: string;\n}\n\ninterface Pages {\n  page: number;\n  display: string;\n}\n\nexport function PagingComponent({\n  totalPages,\n  currentPage,\n  onChange,\n  maxPagesToDisplay = 5,\n  className = \"\",\n}: PagingComponentProps) {\n  const pages: Array<Pages> = [];\n\n  if (totalPages <= maxPagesToDisplay + 1) {\n    for (let i = 1; i <= totalPages; ++i) {\n      pages.push({ page: i, display: i.toString() });\n    }\n  } else {\n    const pageGroup = Math.floor((currentPage - 1) / maxPagesToDisplay);\n    const anchor = pageGroup * maxPagesToDisplay;\n    const start = anchor + 1;\n    const end = Math.min(anchor + maxPagesToDisplay, totalPages);\n\n    if (pageGroup > 0) {\n      pages.push({ page: 1, display: \"1\" });\n      pages.push({ page: start - 1, display: \"...\" });\n    }\n\n    for (let i = start; i <= end; ++i) {\n      pages.push({ page: i, display: i.toString() });\n    }\n\n    if (end < totalPages) {\n      pages.push({ page: end + 1, display: \"...\" });\n      pages.push({ page: totalPages, display: totalPages.toString() });\n    }\n  }\n\n  const canGoBack = currentPage > 1;\n  const canGoNext = currentPage < totalPages;\n\n  return (\n    <nav className={className + \" mb-3\"}>\n      <ul className=\"pagination justify-content-end mb-0\">\n        <li className={\"page-item\" + (!canGoBack ? \" disabled\" : \"\")}>\n          <a\n            className={\"page-link\" + (canGoBack ? \" text-dark\" : \"\")}\n            href=\"#\"\n            onClick={(e) => {\n              e.preventDefault();\n              onChange(currentPage - 1);\n            }}\n          >\n            Previous\n          </a>\n        </li>\n        {pages.map((value) => (\n          <li\n            className={\"page-item\" + (currentPage == value.page ? \" active\" : \"\")}\n            key={value.page}\n          >\n            <a\n              className={\"page-link \" + (currentPage == value.page ? \"bg-dark\" : \"text-dark\")}\n              href=\"#\"\n              onClick={(e) => {\n                e.preventDefault();\n                onChange(value.page);\n              }}\n            >\n              {value.display}\n            </a>\n          </li>\n        ))}\n        <li className={\"page-item\" + (!canGoNext ? \" disabled\" : \"\")}>\n          <a\n            className={\"page-link\" + (canGoNext ? \" text-dark\" : \"\")}\n            href=\"#\"\n            onClick={(e) => {\n              e.preventDefault();\n              onChange(currentPage + 1);\n            }}\n          >\n            Next\n          </a>\n        </li>\n      </ul>\n    </nav>\n  );\n}\n"],"names":["useRef","useEffect","useState","totalPages","currentPage","onChange","pages","i","_jsx","_jsxs","e","display"],"mappings":"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"}