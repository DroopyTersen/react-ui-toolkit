var y=Object.defineProperty,h=Object.defineProperties;var f=Object.getOwnPropertyDescriptors;var s=Object.getOwnPropertySymbols;var u=Object.prototype.hasOwnProperty,c=Object.prototype.propertyIsEnumerable;var p=(e,t,o)=>t in e?y(e,t,{enumerable:!0,configurable:!0,writable:!0,value:o}):e[t]=o,i=(e,t)=>{for(var o in t||(t={}))u.call(t,o)&&p(e,o,t[o]);if(s)for(var o of s(t))c.call(t,o)&&p(e,o,t[o]);return e},l=(e,t)=>h(e,f(t));var m=(e,t)=>{var o={};for(var n in e)u.call(e,n)&&t.indexOf(n)<0&&(o[n]=e[n]);if(e!=null&&s)for(var n of s(e))t.indexOf(n)<0&&c.call(e,n)&&(o[n]=e[n]);return o};import"./index.be79fcbf.js";import{c as a,A as v,M as k}from"./Props.dd6274f3.js";import"./iframe.236b0c21.js";import"./jsx-runtime.b789c2e1.js";import{S as g}from"./SourceCodeLink.be0a1d60.js";import{P as w}from"./PropsTable.1206ad61.js";import"./string.bf3fd91c.js";const x={},b="wrapper";function d(o){var n=o,{components:e}=n,t=m(n,["components"]);return a(b,l(i(i({},x),t),{components:e,mdxType:"MDXLayout"}),a(k,{title:"Hooks/useInterval",mdxType:"Meta"}),a("h1",null,"useInterval"),a("p",null,"Lets you perform execute a function on the specified interval. You can turn it off by passing a ",a("inlineCode",{parentName:"p"},"delay")," of ",a("inlineCode",{parentName:"p"},"0"),"."),a("pre",null,a("code",{parentName:"pre",className:"language-javascript"},`// Ex: Poll for new data every 5 seconds
useInterval(() => {
  checkForChanges();
}, 5000);
`)),a("h2",null,"Import"),a("pre",null,a("code",{parentName:"pre",className:"language-tsx"},`import { useInterval } from "~ui-toolkit/hooks/useInterval";
`)),a("h2",null,"Params"),a(w,{properties:[{name:"callback",type:"() => void",description:"Whatever function you want to call after the specified amount of time. The callback is stored on a ref, so if the call back changes the interval will not reset.",isRequired:"Required"},{name:"delay",type:"number",description:"Milliseconds. The amount of time you want to wait between repeatedly invoking the passed in callback. If you pass 0, the interval will be turned off.",isRequired:"Required"},{name:"intervalKey",type:"any",description:"If you pass an interval key, the interval will be reset anytime the key changes.  Without an interval key, the interval is only reset if the delay param changes.",isRequired:"Optional"}],mdxType:"PropsTable"}),a(g,{path:"hooks/useInterval.ts",mdxType:"SourceCodeLink"},"View Source"))}d.isMDXComponent=!0;const I=()=>{throw new Error("Docs-only story")};I.parameters={docsOnly:!0};const r={title:"Hooks/useInterval",includeStories:["__page"]},C={};r.parameters=r.parameters||{};r.parameters.docs=l(i({},r.parameters.docs||{}),{page:()=>a(v,{mdxStoryNameToKey:C,mdxComponentAnnotations:r},a(d,null))});const L=["__page"];export{L as __namedExportsOrder,I as __page,r as default};
//# sourceMappingURL=useInterval.stories.9cab903c.js.map
