{"version":3,"file":"useAsyncData.85b8bd21.js","sources":["../../src/ui-toolkit/hooks/useAsyncData.ts"],"sourcesContent":["/*\nlet { data, isLoading, error} = useAsyncData<NewsPages[]>([], getNews, [siteUrl, maxItems]);\n*/\nimport { useEffect, useReducer, useRef } from \"react\";\n\nexport interface AsyncDataState<T> {\n  /** Indicates whether the asyncFn is done yet */\n  isLoading: boolean;\n  /** Whatever your asncFn returns, assuming it succeeds */\n  data: T;\n  /** The error message if the asyncFn errors */\n  error: string;\n}\n\nfunction reducer<T>(state: AsyncDataState<T>, action: any) {\n  switch (action.type) {\n    case \"start\":\n      return {\n        ...state,\n        isLoading: true,\n        data: action.data || state.data || null,\n        error: \"\",\n      };\n    case \"success\":\n      return {\n        ...state,\n        isLoading: false,\n        data: action.data,\n        error: \"\",\n      };\n    case \"error\":\n      return {\n        ...state,\n        isLoading: false,\n        error: action.error,\n      };\n    case \"replace\":\n      return {\n        ...state,\n        isLoading: false,\n        data: action.data,\n        error: \"\",\n      };\n    default:\n      return state;\n  }\n}\n\nexport function useAsyncData<T>(asyncFn: (...args) => Promise<T>, args: any[], initialValue: T) {\n  const [state, dispatch] = useReducer(reducer, {\n    isLoading: false,\n    error: \"\",\n    data: initialValue,\n  });\n\n  const asyncFnRef = useRef(asyncFn);\n\n  useEffect(() => {\n    asyncFnRef.current = asyncFn;\n  });\n\n  useEffect(() => {\n    let isUnmounted = false;\n    const doAsync = async () => {\n      try {\n        dispatch({ type: \"start\", data: initialValue });\n        const data = await asyncFnRef.current(...args);\n        if (isUnmounted) return;\n        dispatch({ type: \"success\", data });\n      } catch (err) {\n        dispatch({ type: \"error\", error: err });\n      }\n    };\n    doAsync();\n    return () => {\n      isUnmounted = true;\n    };\n    // eslint-disable-next-line\n  }, args);\n\n  return {\n    ...(state as AsyncDataState<T>),\n    replace: (data: T) => dispatch({ type: \"replace\", data }),\n  };\n}\n"],"names":["useReducer","useRef","useEffect"],"mappings":"qdAcA,WAAoB,EAA0B,EAAa,CACzD,OAAQ,EAAO,UACR,QACI,MAAA,QACF,GADE,CAEL,UAAW,GACX,KAAM,EAAO,MAAQ,EAAM,MAAQ,KACnC,MAAO,EAAA,OAEN,UACI,MAAA,QACF,GADE,CAEL,UAAW,GACX,KAAM,EAAO,KACb,MAAO,EAAA,OAEN,QACI,MAAA,QACF,GADE,CAEL,UAAW,GACX,MAAO,EAAO,KAAA,OAEb,UACI,MAAA,QACF,GADE,CAEL,UAAW,GACX,KAAM,EAAO,KACb,MAAO,EAAA,WAGF,MAAA,GAEb,CAEgC,WAAA,EAAkC,EAAa,EAAiB,CAC9F,KAAM,CAAC,EAAO,GAAYA,EAAAA,QAAAA,WAAW,EAAS,CAC5C,UAAW,GACX,MAAO,GACP,KAAM,CAAA,CACP,EAEK,EAAaC,iBAAO,CAAO,EAEjCC,SAAAA,QAAAA,UAAU,IAAM,CACd,EAAW,QAAU,CAAA,CACtB,EAEDA,EAAAA,QAAAA,UAAU,IAAM,CACd,GAAI,GAAc,GAWV,MAVQ,UAAY,CACtB,GAAA,CACF,EAAS,CAAE,KAAM,QAAS,KAAM,CAAc,CAAA,EAC9C,KAAM,GAAO,KAAM,GAAW,QAAQ,GAAG,CAAI,EACzC,GAAA,EAAa,OACjB,EAAS,CAAE,KAAM,UAAW,MAAM,CAAA,QAC3B,GACP,EAAS,CAAE,KAAM,QAAS,MAAO,CAAK,CAAA,CACxC,CAAA,KAGK,IAAM,CACG,EAAA,EAAA,GAGf,CAAI,EAEA,OACD,GADC,CAEL,QAAS,AAAC,GAAY,EAAS,CAAE,KAAM,UAAW,OAAM,CAAA,EAE5D"}