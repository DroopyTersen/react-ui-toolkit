var h=Object.defineProperty,y=Object.defineProperties;var S=Object.getOwnPropertyDescriptors;var n=Object.getOwnPropertySymbols;var u=Object.prototype.hasOwnProperty,d=Object.prototype.propertyIsEnumerable;var l=(t,a,s)=>a in t?h(t,a,{enumerable:!0,configurable:!0,writable:!0,value:s}):t[a]=s,i=(t,a)=>{for(var s in a||(a={}))u.call(a,s)&&l(t,s,a[s]);if(n)for(var s of n(a))d.call(a,s)&&l(t,s,a[s]);return t},p=(t,a)=>y(t,S(a));var m=(t,a)=>{var s={};for(var r in t)u.call(t,r)&&a.indexOf(r)<0&&(s[r]=t[r]);if(t!=null&&n)for(var r of n(t))a.indexOf(r)<0&&d.call(t,r)&&(s[r]=t[r]);return s};import"./index.be79fcbf.js";import{c as e,A as g,M as b}from"./Props.ae9119dc.js";import"./iframe.ad13290e.js";import"./jsx-runtime.b789c2e1.js";import{S as f}from"./SourceCodeLink.be0a1d60.js";import{P as k}from"./PropsTable.1206ad61.js";import"./string.bf3fd91c.js";const P={},x="wrapper";function c(s){var r=s,{components:t}=r,a=m(r,["components"]);return e(x,p(i(i({},P),a),{components:t,mdxType:"MDXLayout"}),e(b,{title:"Hooks/usePersistedState",mdxType:"Meta"}),e("h1",null,"usePersistedState"),e("p",null,"A hook that works just like ",e("inlineCode",{parentName:"p"},"useState"),", except that it persists the value to ",e("inlineCode",{parentName:"p"},"localStorage"),`.
On load, if there is a value in localStorage, that value will be used as the initial state.
You can pass an optional 3rd parameter to specify `,e("inlineCode",{parentName:"p"},"SessionStorage")," should be used."),e("pre",null,e("code",{parentName:"pre",className:"language-javascript"},`// Ex: Remember which tab is active across refreshes and browser tabs
let [tab, setTab] = usePersistedState("myapp:active-tab", "users");
`)),e("h2",null,"Import"),e("pre",null,e("code",{parentName:"pre",className:"language-tsx"},`import { usePersistedState } from "~ui-toolkit/hooks/usePersistedState";
`)),e("h2",null,"Params"),e(k,{properties:[{name:"key",type:"string",description:"The name of of the cache key",isRequired:"Required"},{name:"defaultValue",type:"T",description:"Will only be used if there isn't anything cache",isRequired:"Required"},{name:"storage",type:"LocalStorage | SessionStorage",description:"Defaults to LocalStorage.",isRequired:"Optional"}],mdxType:"PropsTable"}),e("h2",null,"Return value"),e("p",null,"Returns an Array (a tuple) with a getter and a setter, just like ",e("inlineCode",{parentName:"p"},"React.useState")),e("pre",null,e("code",{parentName:"pre",className:"language-javascript"},`// You could call 'thing' whatever you want. Just like useState
let [tabKey, setTabKey] = usePersistedState("myapp-active-tab", "");
`)),e(f,{path:"hooks/usePersistedState.ts",mdxType:"SourceCodeLink"},"View Source"))}c.isMDXComponent=!0;const w=()=>{throw new Error("Docs-only story")};w.parameters={docsOnly:!0};const o={title:"Hooks/usePersistedState",includeStories:["__page"]},N={};o.parameters=o.parameters||{};o.parameters.docs=p(i({},o.parameters.docs||{}),{page:()=>e(g,{mdxStoryNameToKey:N,mdxComponentAnnotations:o},e(c,null))});const q=["__page"];export{q as __namedExportsOrder,w as __page,o as default};
//# sourceMappingURL=usePersistedState.stories.491697df.js.map
