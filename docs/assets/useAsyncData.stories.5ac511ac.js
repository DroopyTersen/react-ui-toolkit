var y=Object.defineProperty,g=Object.defineProperties;var f=Object.getOwnPropertyDescriptors;var s=Object.getOwnPropertySymbols;var u=Object.prototype.hasOwnProperty,c=Object.prototype.propertyIsEnumerable;var p=(a,t,n)=>t in a?y(a,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):a[t]=n,i=(a,t)=>{for(var n in t||(t={}))u.call(t,n)&&p(a,n,t[n]);if(s)for(var n of s(t))c.call(t,n)&&p(a,n,t[n]);return a},l=(a,t)=>g(a,f(t));var d=(a,t)=>{var n={};for(var r in a)u.call(a,r)&&t.indexOf(r)<0&&(n[r]=a[r]);if(a!=null&&s)for(var r of s(a))t.indexOf(r)<0&&c.call(a,r)&&(n[r]=a[r]);return n};import"./index.be79fcbf.js";import{c as e,A as T,M as w}from"./Props.ae9119dc.js";import"./iframe.ad13290e.js";import"./jsx-runtime.b789c2e1.js";import{S as A}from"./SourceCodeLink.be0a1d60.js";import{P as m}from"./PropsTable.1206ad61.js";import"./string.bf3fd91c.js";const R={},k="wrapper";function h(n){var r=n,{components:a}=r,t=d(r,["components"]);return e(k,l(i(i({},R),t),{components:a,mdxType:"MDXLayout"}),e(w,{title:"Hooks/useAsyncData",mdxType:"Meta"}),e("h1",null,"useAsyncData"),e("p",null,"Helps manage data fetching inside a React component."),e("ol",null,e("li",{parentName:"ol"},"Pass in any async Function."),e("li",{parentName:"ol"},"Pass in the arguments to that asyncFn"),e("li",{parentName:"ol"},"The hook takes care of calling the Async function when the args have changed")),e("pre",null,e("code",{parentName:"pre",className:"language-tsx"},`function NewsGrid({ siteUrl, numItems }) {

    let { data, isLoading, error } = useAsyncData<NewsPage[]>(api.getNews, [siteUrl, numItems])

    if (isLoading) return <div>Loading...</div>
    if (error) return <div>Uh Oh!</div>

    return (
        <Grid>
         { data.map(item => <NewsCard item={item} /> }
        </Grid>
    )
}
`)),e("h2",null,"Import"),e("pre",null,e("code",{parentName:"pre",className:"language-js"},`import { useAsyncData } from "~ui-toolkit/hooks/useAsyncData";
`)),e("h2",null,"Params"),e("p",null,"The hook takes in the following params:"),e(m,{properties:[{name:"asyncFn",type:"(...args) => Promise<T>",description:"Any async function. The result of the function will be return on the 'data' property.",isRequired:"Required"},{name:"args",type:"[...args]",description:"An array of all the parameters that should be passed to the asyncFn.  If any of these params, change, the async function will be called again.",isRequired:"Required"},{name:"initialValue",type:"T",description:"The initial value for 'data'.",isRequired:"Optional"}],mdxType:"PropsTable"}),e("h2",null,"Return Value"),e("p",null,"The hook returns the following signature:"),e(m,{properties:[{name:"isLoading",type:"bool",description:"Whether the async data function is activly running",isRequired:"Required"},{name:"data",type:"T",description:"The value for 'data'.",isRequired:"Optional"},{name:"error",type:"string",description:"The error message",isRequired:"Optional"},{name:"replace",type:"(data:T) => void",description:"A function you can call to overwrite the data without calling the asyncFn.",isRequired:"Required"}],mdxType:"PropsTable"}),e(A,{path:"hooks/useAsyncData.ts",mdxType:"SourceCodeLink"},"View Source"))}h.isMDXComponent=!0;const D=()=>{throw new Error("Docs-only story")};D.parameters={docsOnly:!0};const o={title:"Hooks/useAsyncData",includeStories:["__page"]},N={};o.parameters=o.parameters||{};o.parameters.docs=l(i({},o.parameters.docs||{}),{page:()=>e(T,{mdxStoryNameToKey:N,mdxComponentAnnotations:o},e(h,null))});const C=["__page"];export{C as __namedExportsOrder,D as __page,o as default};
//# sourceMappingURL=useAsyncData.stories.5ac511ac.js.map
